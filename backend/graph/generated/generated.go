// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"sistema-backend/graph/model"
	"sistema-backend/models"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) ExecutableSchema {
	return &executableSchema{
		resolvers: cfg.Resolvers,
	}
}

type Config struct {
	Resolvers ResolverRoot
}

type ExecutableSchema interface {
	Exec(ctx context.Context) error
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type MutationResolver interface {
	CreateUser(ctx context.Context, input model.NewUser) (*models.User, error)
	UpdateUser(ctx context.Context, id string, input model.UpdateUser) (*models.User, error)
	DeleteUser(ctx context.Context, id string) (bool, error)
	CreateProduct(ctx context.Context, input model.NewProduct) (*models.Product, error)
	UpdateProduct(ctx context.Context, id string, input model.UpdateProduct) (*models.Product, error)
	DeleteProduct(ctx context.Context, id string) (bool, error)
}

type QueryResolver interface {
	Users(ctx context.Context) ([]*models.User, error)
	User(ctx context.Context, id string) (*models.User, error)
	Products(ctx context.Context) ([]*models.Product, error)
	Product(ctx context.Context, id string) (*models.Product, error)
}

type executableSchema struct {
	resolvers ResolverRoot
}

func (e *executableSchema) Exec(ctx context.Context) error {
	return nil
}